{"/home/travis/build/npmtest/node-npmtest-ember-infinity/test.js":"/* istanbul instrument in package npmtest_ember_infinity */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-infinity/lib.npmtest_ember_infinity.js":"/* istanbul instrument in package npmtest_ember_infinity */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ember_infinity = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ember_infinity = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-infinity/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ember-infinity && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ember_infinity */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ember_infinity\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ember_infinity.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ember_infinity.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ember_infinity.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ember_infinity.__dirname + '/lib.npmtest_ember_infinity.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-infinity/node_modules/ember-infinity/index.js":"/* jshint node: true */\n'use strict';\n\nvar checker = require('ember-cli-version-checker');\n\nmodule.exports = {\n  name: 'ember-infinity',\n\n  init: function() {\n    if (this._super.init) {\n      this._super.init.apply(this, arguments);\n    }\n    checker.assertAbove(this, '0.2.0');\n  },\n\n  included: function(app) {\n    this.addons.forEach(function(addon){\n      if (addon.name === \"ember-version-is\") {\n        addon.included.apply(addon, [app]);\n      }\n    });\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-ember-infinity/node_modules/ember-infinity/config/ember-try.js":"/*jshint node:true*/\nmodule.exports = {\n  scenarios: [\n    {\n      name: 'default',\n      dependencies: { }\n    },\n    {\n      name: 'ember-1.10',\n      dependencies: {\n        ember: '~1.10.0',\n        'ember-data': '1.13.10'\n      }\n    },\n    {\n      name: 'ember-1.11',\n      dependencies: {\n        ember: '~1.11.3',\n        'ember-data': '1.13.10'\n      }\n    },\n    {\n      name: 'ember-1.12',\n      dependencies: {\n        ember: '~1.12.0'\n      }\n    },\n    {\n      name: 'ember-1.13',\n      dependencies: {\n        ember: '~1.13.0'\n      }\n    },\n    {\n      name: 'ember-2.0',\n      dependencies: {\n        ember: '~2.0.0',\n        'ember-data': '~2.0.0'\n      }\n    },\n    {\n      name: 'ember-2.1',\n      dependencies: {\n        ember: '~2.1.0',\n        'ember-data': '~2.1.0'\n      }\n    },\n    {\n      name: 'ember-2.2',\n      dependencies: {\n        ember: '~2.2.0',\n        'ember-data': '~2.2.0'\n      }\n    },\n    {\n      name: 'ember-2.3',\n      dependencies: {\n        ember: '~2.3.0',\n        'ember-data': '~2.3.0'\n      }\n    },\n    {\n      name: 'ember-2.4',\n      dependencies: {\n        ember: '~2.4.0',\n        'ember-data': '~2.4.0'\n      }\n    },\n    {\n      name: 'ember-2.5',\n      dependencies: {\n        ember: '~2.5.0',\n        'ember-data': '~2.5.0'\n      }\n    },\n    {\n      name: 'ember-2.6',\n      dependencies: {\n        ember: '~2.6.0',\n        'ember-data': '~2.6.0'\n      }\n    },\n    {\n      name: 'ember-2.7',\n      dependencies: {\n        ember: '~2.7.0',\n        'ember-data': '~2.7.0'\n      }\n    },\n    {\n      name: 'ember-2.8',\n      dependencies: {\n        ember: '~2.8.0',\n        'ember-data': '~2.8.0'\n      }\n    },\n    {\n      name: 'ember-release',\n      dependencies: {\n        ember: 'release',\n        'ember-data': 'release'\n      }\n    },\n    {\n      name: 'ember-release-ember-data-1.13.1x',\n      dependencies: {\n        ember: 'release',\n        'ember-data': '~1.13.11'\n      },\n      resolutions: {\n        ember: 'release',\n        'ember-data': '~1.13.11'\n      }\n    },\n    {\n      name: 'ember-beta',\n      dependencies: {\n        ember: 'beta',\n        'ember-data': 'beta'\n      },\n      resolutions: {\n        ember: 'beta'\n      }\n    },\n    {\n      name: 'ember-canary',\n      dependencies: {\n        ember: 'canary',\n        'ember-data': 'canary'\n      },\n      resolutions: {\n        ember: 'canary'\n      }\n    }\n  ]\n};\n","/home/travis/build/npmtest/node-npmtest-ember-infinity/node_modules/ember-infinity/config/environment.js":"/*jshint node:true*/\n'use strict';\n\nmodule.exports = function(/* environment, appConfig */) {\n  return { };\n};\n","/home/travis/build/npmtest/node-npmtest-ember-infinity/node_modules/ember-infinity/addon/components/infinity-loader.js":"import Ember from 'ember';\nimport emberVersionIs from 'ember-version-is';\n\nconst InfinityLoaderComponent = Ember.Component.extend({\n  classNames: [\"infinity-loader\"],\n  classNameBindings: [\"infinityModel.reachedInfinity\"],\n  guid: null,\n  eventDebounce: 10,\n  loadMoreAction: 'infinityLoad',\n  loadingText: 'Loading Infinite Model...',\n  loadedText: 'Infinite Model Entirely Loaded.',\n  destroyOnInfinity: false,\n  developmentMode: false,\n  scrollable: null,\n  triggerOffset: 0,\n\n  didInsertElement() {\n    this._super(...arguments);\n    this._setupScrollable();\n    this.set('guid', Ember.guidFor(this));\n    this._bindEvent('scroll');\n    this._bindEvent('resize');\n    this._loadMoreIfNeeded();\n  },\n\n  willDestroyElement() {\n    this._super(...arguments);\n    this._unbindEvent('scroll');\n    this._unbindEvent('resize');\n  },\n\n  _bindEvent(eventName) {\n    this.get('_scrollable').on(`${eventName}.${this.get('guid')}`, () => {\n      Ember.run.debounce(this, this._loadMoreIfNeeded, this.get('eventDebounce'));\n    });\n  },\n\n  _unbindEvent(eventName) {\n    let scrollable = this.get('_scrollable');\n    if (scrollable) {\n      scrollable.off(`${eventName}.${this.get('guid')}`);\n    }\n  },\n\n  _selfOffset() {\n    if (this.get('_customScrollableIsDefined')) {\n      return this.$().offset().top - this.get(\"_scrollable\").offset().top + this.get(\"_scrollable\").scrollTop();\n    } else {\n      return this.$().offset().top;\n    }\n  },\n\n  _bottomOfScrollableOffset() {\n    return this.get('_scrollable').height() + this.get(\"_scrollable\").scrollTop();\n  },\n\n  _triggerOffset() {\n    return this._selfOffset() - this.get('triggerOffset');\n  },\n\n  _shouldLoadMore() {\n    if (this.get('developmentMode') || typeof FastBoot !== 'undefined' || this.isDestroying || this.isDestroyed) {\n      return false;\n    }\n\n    return this._bottomOfScrollableOffset() > this._triggerOffset();\n  },\n\n  _loadMoreIfNeeded() {\n    if (this._shouldLoadMore()) {\n      this.sendAction('loadMoreAction', this.get('infinityModel'));\n    }\n  },\n\n  _setupScrollable() {\n    var scrollable = this.get('scrollable');\n    if (Ember.typeOf(scrollable) === 'string') {\n      var items = Ember.$(scrollable);\n      if (items.length === 1) {\n        this.set('_scrollable', items.eq(0));\n      } else if (items.length > 1) {\n        throw new Error(\"Ember Infinity: Multiple scrollable elements found for: \" + scrollable);\n      } else {\n        throw new Error(\"Ember Infinity: No scrollable element found for: \" + scrollable);\n      }\n      this.set('_customScrollableIsDefined', true);\n    } else if (scrollable === undefined || scrollable === null) {\n      this.set('_scrollable', Ember.$(window));\n      this.set('_customScrollableIsDefined', false);\n    } else {\n      throw new Error(\"Ember Infinity: Scrollable must either be a css selector string or left empty to default to window\");\n    }\n  },\n\n  loadedStatusDidChange: Ember.observer('infinityModel.reachedInfinity', 'destroyOnInfinity', function () {\n    if (this.get('infinityModel.reachedInfinity') && this.get('destroyOnInfinity')) {\n      this.destroy();\n    }\n  }),\n\n  infinityModelPushed: Ember.observer('infinityModel.length', function() {\n    Ember.run.scheduleOnce('afterRender', this, this._loadMoreIfNeeded);\n  })\n});\n\nif (emberVersionIs('lessThan', '1.13.0')) {\n  InfinityLoaderComponent.reopen({\n    hasBlock: Ember.computed.alias('template')\n  });\n}\n\nexport default InfinityLoaderComponent;\n","/home/travis/build/npmtest/node-npmtest-ember-infinity/node_modules/ember-infinity/addon/mixins/route.js":"import Ember from 'ember';\nimport { emberDataVersionIs } from 'ember-version-is';\n\nconst keys = Object.keys || Ember.keys;\nconst assign = Ember.assign || Ember.merge;\n/**\n  The Ember Infinity Route Mixin enables an application route to load paginated\n  records for the route `model` as triggered by the controller (or Infinity Loader\n  component).\n\n  @class RouteMixin\n  @namespace EmberInfinity\n  @module ember-infinity/mixins/route\n  @extends Ember.Mixin\n*/\nconst RouteMixin = Ember.Mixin.create({\n\n  /**\n    @private\n    @property _perPage\n    @type Integer\n    @default 25\n  */\n  _perPage: 25,\n\n  /**\n    @private\n    @property currentPage\n    @type Integer\n    @default 0\n  */\n  currentPage: 0,\n\n  /**\n    @private\n    @property _extraParams\n    @type Object\n    @default {}\n  */\n  _extraParams: {},\n\n  /**\n    @private\n    @property _boundParams\n    @type Object\n    @default {}\n  */\n  _boundParams: {},\n\n  /**\n    @private\n    @property _loadingMore\n    @type Boolean\n    @default false\n  */\n  _loadingMore: false,\n\n  /**\n    @private\n    @property _totalPages\n    @type Integer\n    @default 0\n  */\n  _totalPages: 0,\n\n  /**\n    @private\n    @property _infinityModelName\n    @type String\n    @default null\n  */\n  _infinityModelName: null,\n\n  /**\n    @private\n    @property _modelPath\n    @type String\n    @default 'controller.model'\n  */\n  _modelPath: 'controller.model',\n\n  /**\n   * Name of the \"per page\" param in the\n   * resource request payload\n   * @type {String}\n   * @default  \"per_page\"\n   */\n  perPageParam: 'per_page',\n\n  /**\n   * Name of the \"page\" param in the\n   * resource request payload\n   * @type {String}\n   * @default \"page\"\n   */\n  pageParam: 'page',\n\n  /**\n   * Path of the \"total pages\" param in\n   * the HTTP response\n   * @type {String}\n   * @default \"meta.total_pages\"\n   */\n  totalPagesParam: 'meta.total_pages',\n\n  actions: {\n    infinityLoad(infinityModel) {\n      if (infinityModel === this._infinityModel()) {\n        this._infinityLoad();\n      } else {\n        return true;\n      }\n    }\n  },\n\n  /**\n   * The supported findMethod name for\n   * the developers Ember Data version.\n   * Provided here for backwards compat.\n   * @type {String}\n   * @default \"query\"\n   */\n  _storeFindMethod: 'query',\n\n  _firstPageLoaded: false,\n\n  /**\n    @private\n    @property _canLoadMore\n    @type Boolean\n    @default false\n  */\n  _canLoadMore: Ember.computed('_totalPages', 'currentPage', function() {\n    const totalPages  = this.get('_totalPages');\n    const currentPage = this.get('currentPage');\n\n    return (totalPages && currentPage !== undefined) ? (currentPage < totalPages) : false;\n  }),\n\n  /**\n   @private\n   @method _infinityModel\n   @return {DS.RecordArray} the model\n  */\n  _infinityModel() {\n    return this.get(this.get('_modelPath'));\n  },\n\n  _ensureCompatibility() {\n    if (emberDataVersionIs('greaterThan', '1.0.0-beta.19.2') && emberDataVersionIs('lessThan', '1.13.4')) {\n      throw new Ember.Error(\"Ember Infinity: You are using an unsupported version of Ember Data.  Please upgrade to at least 1.13.4 or downgrade to 1.0.0-beta.19.2\");\n    }\n\n    if (Ember.isEmpty(this.get('store')) || Ember.isEmpty(this.get('store')[this._storeFindMethod])){\n      throw new Ember.Error(\"Ember Infinity: Ember Data store is not available to infinityModel\");\n    }\n\n    if (this.get('_infinityModelName') === undefined) {\n      throw new Ember.Error(\"Ember Infinity: You must pass a Model Name to infinityModel\");\n    }\n  },\n\n  /**\n    Use the infinityModel method in the place of `this.store.find('model')` to\n    initialize the Infinity Model for your route.\n\n    @method infinityModel\n    @param {String} modelName The name of the model.\n    @param {Object} options Optional, the perPage and startingPage to load from.\n    @param {Object} boundParams Optional, any route properties to be included as additional params.\n    @return {Ember.RSVP.Promise}\n  */\n  infinityModel(modelName, options, boundParams) {\n    if (emberDataVersionIs('lessThan', '1.13.0')) {\n      this.set('_storeFindMethod', 'find');\n    }\n\n    this.set('_infinityModelName', modelName);\n\n    this._ensureCompatibility();\n\n    options = options ? assign({}, options) : {};\n    const startingPage = options.startingPage === undefined ? 0 : options.startingPage-1;\n\n    const perPage      = options.perPage || this.get('_perPage');\n    const modelPath    = options.modelPath || this.get('_modelPath');\n\n    delete options.startingPage;\n    delete options.perPage;\n    delete options.modelPath;\n\n    this.setProperties({\n      currentPage: startingPage,\n      _firstPageLoaded: false,\n      _perPage: perPage,\n      _modelPath: modelPath,\n      _extraParams: options\n    });\n\n    if (typeof boundParams === 'object') {\n      this.set('_boundParams', boundParams);\n    }\n\n    return this._loadNextPage();\n  },\n\n  /**\n   Call additional functions after finding the infinityModel in the Ember data store.\n   @private\n   @method _afterInfinityModel\n   @param {Function} infinityModelPromise The resolved result of the Ember store find method. Passed in automatically.\n   @return {Ember.RSVP.Promise}\n  */\n  _afterInfinityModel(_this) {\n    return function(infinityModelPromiseResult) {\n      if (typeof _this.afterInfinityModel === 'function') {\n        let result = _this.afterInfinityModel(infinityModelPromiseResult);\n        if (result) {\n          return result;\n        }\n      }\n\n      return infinityModelPromiseResult;\n    };\n  },\n\n  /**\n   Trigger a load of the next page of results.\n\n   @private\n   @method _infinityLoad\n   */\n  _infinityLoad() {\n    if (this.get('_loadingMore') || !this.get('_canLoadMore')) {\n      return;\n    }\n\n    this._loadNextPage();\n  },\n\n  /**\n   load the next page from the adapter and update the model\n\n   @private\n   @method _loadNextPage\n   @return {Ember.RSVP.Promise} A Promise that resolves the model\n   */\n  _loadNextPage() {\n    this.set('_loadingMore', true);\n\n    return this._requestNextPage()\n      .then((newObjects) => {\n        this._nextPageLoaded(newObjects);\n\n        return newObjects;\n      })\n      .finally(() => {\n        this.set('_loadingMore', false);\n      });\n  },\n\n  /**\n   request the next page from the adapter\n\n   @private\n   @method _requestNextPage\n   @returns {Ember.RSVP.Promise} A Promise that resolves the next page of objects\n   */\n  _requestNextPage() {\n    const modelName   = this.get('_infinityModelName');\n    const nextPage    = this.incrementProperty('currentPage');\n    const params      = this._buildParams(nextPage);\n\n    return this.get('store')[this._storeFindMethod](modelName, params).then(\n      this._afterInfinityModel(this));\n  },\n\n  /**\n   build the params for the next page request\n\n   @private\n   @method _buildParams\n   @param {Number} nextPage the page number for the current request\n   @return {Object} The query params for the next page of results\n   */\n  _buildParams(nextPage) {\n    const pageParams = {};\n\n    if(this.get('perPageParam')){\n      pageParams[this.get('perPageParam')] = this.get('_perPage');\n    }\n\n    if(this.get('pageParam')){\n      pageParams[this.get('pageParam')] = nextPage;\n    }\n\n    const params = assign(pageParams, this.get('_extraParams'));\n\n    const boundParams = this.get('_boundParams');\n    if (!Ember.isEmpty(boundParams)) {\n      keys(boundParams).forEach(k => params[k] = this.get(boundParams[k]));\n    }\n\n    return params;\n  },\n\n  /**\n   Update the infinity model with new objects\n   Only called on the second page and following\n\n   @deprecated\n   @method updateInfinityModel\n   @param {Ember.Enumerable} newObjects The new objects to add to the model\n   @return {Ember.Array} returns the new objects\n   */\n  updateInfinityModel(newObjects) {\n    return this._doUpdate(newObjects);\n  },\n\n  _doUpdate(newObjects) {\n    let infinityModel = this._infinityModel();\n    return infinityModel.pushObjects(newObjects.get('content'));\n  },\n\n  /**\n\n   @method _nextPageLoaded\n   @param {Ember.Enumerable} newObjects The new objects to add to the model\n   @return {DS.RecordArray} returns the updated infinity model\n   @private\n   */\n  _nextPageLoaded(newObjects) {\n    const totalPages = newObjects.get(this.get('totalPagesParam'));\n    this.set('_totalPages', totalPages);\n\n    let infinityModel = newObjects;\n\n    if (this.get('_firstPageLoaded')) {\n      if (typeof this.updateInfinityModel === 'function' &&\n          (this.updateInfinityModel !==\n           Ember.Object.extend(RouteMixin).create().updateInfinityModel)) {\n        Ember.deprecate(\"EmberInfinity.updateInfinityModel is deprecated. \"+\n                        \"Please use EmberInfinity.afterInfinityModel.\",\n                        false,\n                        {id: 'ember-infinity.updateInfinityModel', until: '2.1'}\n                       );\n\n        infinityModel = this.updateInfinityModel(newObjects);\n      } else {\n        infinityModel = this._doUpdate(newObjects);\n      }\n    }\n\n    this.set('_firstPageLoaded', true);\n    this._notifyInfinityModelUpdated(newObjects);\n\n    const canLoadMore = this.get('_canLoadMore');\n    infinityModel.set('reachedInfinity', !canLoadMore);\n\n    if (!canLoadMore) {\n      this._notifyInfinityModelLoaded();\n    }\n\n    return infinityModel;\n  },\n\n  /**\n   notify that the infinity model has been updated\n\n   @private\n   @method _notifyInfinityModelUpdated\n   */\n  _notifyInfinityModelUpdated(newObjects) {\n    if (!this.infinityModelUpdated) {\n      return;\n    }\n\n    Ember.run.scheduleOnce('afterRender', this, 'infinityModelUpdated', {\n      lastPageLoaded: this.get('currentPage'),\n      totalPages: this.get('_totalPages'),\n      newObjects: newObjects\n    });\n  },\n\n  /**\n   finish the loading cycle by notifying that infinity has been reached\n\n   @private\n   @method _notifyInfinityModelLoaded\n   */\n  _notifyInfinityModelLoaded() {\n    if (!this.infinityModelLoaded) {\n      return;\n    }\n\n    const totalPages = this.get('_totalPages');\n    Ember.run.scheduleOnce('afterRender', this, 'infinityModelLoaded', { totalPages: totalPages });\n  }\n});\n\nexport default RouteMixin;\n","/home/travis/build/npmtest/node-npmtest-ember-infinity/node_modules/ember-infinity/app/components/infinity-loader.js":"import infinityLoader from 'ember-infinity/components/infinity-loader';\n\nexport default infinityLoader;\n"}